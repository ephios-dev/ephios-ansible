---
- name: create secrets and set them as fact
  no_log: true
  block:
  - name: create django_secret file
    shell: "openssl rand -base64 50 | tr -cd '[:alnum:]' > ~/.django-secret"
    args:
      creates: "~/.django-secret"
  - name: Read django_secret
    shell: "cat ~/.django-secret"
    register: cmd_output
  - name: Set django_secret as fact
    set_fact:
      django_secret: "{{ cmd_output.stdout }}"
  - name: create smtp_password file
    shell: "openssl rand -base64 30 | tr -cd '[:alnum:]' > ~/.smtp-password"
    args:
      creates: "~/.smtp-password"
  - name: Read smtp_password
    shell: "cat ~/.smtp-password"
    register: cmd_output
  - name: Set smtp_password as fact
    set_fact:
      smtp_password: "{{ cmd_output.stdout }}"


- name: set up uberspace web
  block:
  - name: uberspace add web domain
    shell: uberspace web domain add {{ domain }}
    ignore_errors: yes  # if domain is added already, there is a non-zero exit code
  - name: uberspace set application web backend
    shell: uberspace web backend set {{ domain }}/ --http --port 8000
  - name: uberspace set static web backend
    shell: uberspace web backend set {{ domain }}/static/ --apache
    # as we don't have private media files, we can serve them via apache
  - name: uberspace set media web backend
    shell: uberspace web backend set {{ domain }}/media/ --apache

- name: set up uberspace mail
  no_log: true
  block:
  - name: uberspace add mail domain
    shell: uberspace mail domain add {{ domain }}
    ignore_errors: yes  # if domain is added already, there is a non-zero exit code
  - name: uberspace add mailbox
    shell: "uberspace mail user add {{ smtp_mailbox }} -p\"{{ smtp_password }}\""
    ignore_errors: yes  # if user is added already, there is a non-zero exit code
  - name: uberspace set mail password
    shell: "uberspace mail user password {{ smtp_mailbox }} -p\"{{ smtp_password }}\""


- name: set database password as fact
  no_log: true
  block:
  - name: Read Database password
    shell: my_print_defaults client | grep password | cut -d "=" -f 2
    register: cmd_output
  - name: Set database password as fact
    set_fact:
      db_password: "{{ cmd_output.stdout }}"

- name: Make sure database exists
  mysql_db:
    name: "{{ ansible_user }}_ephios"
    state: present


- name: install and set up uwsgi
  block:
  - name: install uwsgi via pip
    pip:
      name: uwsgi
      state: latest
      executable: /usr/bin/pip3.8
      extra_args: --user
    notify:
    - restart uwsgi
  - name: copy uwsgi config
    template: src=templates/uwsgi.j2 dest=~/etc/services.d/uwsgi.ini
    notify:
    - restart uwsgi
  - name: create uwsgi apps-enabled directory
    file:
      path: ~/uwsgi/apps-enabled
      state: directory
  - name: create uwsgi err.log file
    file:
      path: ~/uwsgi/err.log
      state: touch
  - name: create uwsgi out.log file
    file:
      path: ~/uwsgi/out.log
      state: touch

- name: install and set up redis cache
  block:
  - name: create redis directory
    file:
      path: ~/.redis/
      state: directory
  - name: copy redis conf
    template:
      src: "templates/redis.conf.j2"
      dest: "~/.redis/conf"
    notify:
    - reread supervisorctl
    - restart redis
  - name: copy redis ini
    template:
      src: "templates/redis.ini.j2"
      dest: "~/etc/services.d/redis.ini"
    notify:
      - reread supervisorctl
      - restart redis


- name: install ephios
  pip:
    name: "{{ package_name }}"
    state: "{{ 'present' if ephios_version is defined else 'latest' }}"
    version: "{{ ephios_version | default(omit) }}"
    executable: /usr/bin/pip3.8
    extra_args: --user
  notify:
  - restart uwsgi

- name: install plugins
  pip:
    name: "{{ plugins | join(' ') }}"
    state: "latest"
    executable: /usr/bin/pip3.8
    extra_args: --user
  when: plugins is defined

- name: Create vapid keys
  shell: "~/.local/bin/vapid --gen"
  args:
    chdir: "~/"
    creates: "private_key.pem"

- name: copy ephios env
  template:
    src: "templates/ephios.env.j2"
    dest: "~/ephios.env"

- name: django migrate
  shell: source ~/ephios.env && python3.8 -m ephios migrate
  notify:
  - restart uwsgi

- name: django collectstatic
  shell: source ~/ephios.env && python3.8 -m ephios collectstatic --no-input

- name: django compilemessages
  shell: source ~/ephios.env && python3.8 -m ephios compilemessages
  notify:
  - restart uwsgi

- name: django compile i18n javascript
  shell: source ~/ephios.env && python3.8 -m ephios compilejsi18n


- name: copy ephios uwsgi config
  template:
    src: "templates/ephios.ini.j2"
    dest: "~/uwsgi/apps-enabled/ephios.ini"
  notify:
  - restart uwsgi

- name: add cronjob
  cron:
    name: "ephios periodic runner"
    minute: "*/15"
    job: "source ~/ephios.env && python3.8 -m ephios run_periodic"

- cronvar:
    name: MAILTO
    value: ""
